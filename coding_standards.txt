Variable names will be in lower case, with compound names utilizing underscores, e.g., dim1_len, dim1_spc.

Subroutine names will be in all caps, with compound names utilizing underscores and subroutines in EZ_PARALLEL will utilize the 'EZP' suffix, e.g., GET_ID_EZP, CFFT2DF_EZP.

General function calls will be in all caps, e.g., CALL, PRINT, SIN.

Variable declarations will be in all caps, e.g., INTEGER, DOUBLE PRECISION, CHARACTER. Additionally, dimensions for arrays and characters will be declared next to the variable name, e.g., 
DOUBLE PRECISION, DIMENSION(5,7) :: ex_array
Further, all REAL and COMPLEX variables shall be double precision.
When declaring variables, declare all those of the same type together (INTEGER, DOUBLE PRECISION, COUBLE COMPLEX, LOGICAL, CHARACTER) and in the order of ___, DIMENSION (allocated), ALLOCATABLE, PARAMETER.

The default indenting for DO loops and IF statements will be two spaces, e.g., 
IF (___) THEN
  ...
END IF
Line continuations will have no additional indent, but will start with '& '

All filename suffixes will be '.f'.

All code shall utilize the IMPLICIT NONE statement wherever possible.

All code should be able to compile on Linux machines with 'mpifort' and on Windows machines with 'gfortran' (by including 'msmpi'). The required changes to makefiles to access these different options should be small. Additionally, makefiles will use lowercase function calls and uppercase variables names (with compound names not utilizing underscores).

All lines of code will have a maximum length of 80 characters.

All code should include a variety of error checks, and ERROR STOP messages should cite where the error is in the code and what caused it.

Each code file should include a description (what it does and how), the author, when the file was most recently editted, and a list of variable descriptions.

Each subroutine in EZ_PARALLEL should have an associated unit test.

If continuing on the next line inside of parentheses for an equation, indent the next line.